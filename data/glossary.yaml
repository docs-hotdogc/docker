base image: |
  基础镜像是你在 Dockerfile 中通过 `FROM` 指令指定的镜像。
  它定义了构建的起点。
  Dockerfile 指令会在基础镜像之上创建额外的层。
  带有 `FROM scratch` 指令的 Dockerfile 使用空白基础镜像。

build: |
  构建是使用 Dockerfile 构建 Docker 镜像的过程。构建过程
  使用 Dockerfile 和"上下文"。上下文是构建镜像的
  目录中的文件集合。

container: |
  容器是镜像的可运行实例。你可以使用 Docker CLI 或 API 来启动、停止、移动或
  删除容器。容器彼此之间以及与主机系统是相互隔离的，但共享操作系统内核。它们提供了
  一种轻量级且一致的应用程序运行方式。

context: |
  Docker 上下文包含 Docker CLI 连接到不同 Docker 环境（如远程 Docker 主机或 Docker
  Desktop）的端点配置。使用 `docker context use` 在上下文之间切换。

Docker CLI: |
  Docker CLI 是用于与 Docker Engine 交互的命令行界面。它提供了如 `docker run`、
  `docker build`、`docker ps` 等命令来管理 Docker 容器、镜像和服务。

Docker Compose: |
  Docker Compose 是一个使用 YAML 文件（`compose.yaml`）定义和运行多容器 Docker
  应用程序的工具。使用单个命令，你就可以启动配置中定义的所有服务。

Docker Desktop: |
  Docker Desktop 是一个适用于 Windows、macOS 和 Linux 的易于安装的应用程序，
  它提供本地 Docker 开发环境。它包含 Docker Engine、Docker CLI、Docker Compose
  和一个 Kubernetes 集群。

Docker Engine: |
  Docker Engine 是创建和运行 Docker 容器的客户端-服务器技术。它包含 Docker 
  守护进程（`dockerd`）、REST API 和 Docker CLI 客户端。

Docker Hub: |
  Docker Hub 是 Docker 的公共注册表服务，用户可以在其中存储、共享和
  管理容器镜像。它托管 Docker 官方镜像、已验证发布者内容和社区贡献的镜像。

image: |
  镜像是用于创建容器的只读模板。它通常包括使用 Dockerfile 打包在一起的
  基础操作系统和应用程序代码。镜像使用标签进行版本管理，可以推送到
  容器注册表（如 Docker Hub）或从其中拉取。

layer: |
  在镜像中，层是由 Dockerfile 中的指令表示的修改。层按顺序应用于基础镜像
  以创建最终镜像。未更改的层会被缓存，使镜像构建更快更高效。

multi-architecture image: |
  多架构镜像是支持多个 CPU 架构（如 `amd64` 或 `arm64`）的 Docker 镜像。
  使用多架构镜像时，Docker 会自动为你的平台拉取正确架构的镜像。

persistent storage: |
  持久存储或卷存储为容器提供了一种在其生命周期之外保留数据的方式。
  这种存储可以存在于主机或外部存储系统上，且不与容器的运行时绑定。

registry: |
  注册表是用于 Docker 镜像的存储和内容交付系统。默认的公共
  注册表是 Docker Hub，但你也可以使用 Docker Distribution 设置私有注册表。

volume: |
  卷是容器内的一个特殊目录，它绕过了联合文件系统。卷设计用于独立于
  容器生命周期持久化数据。Docker 支持主机卷、匿名卷和命名卷。